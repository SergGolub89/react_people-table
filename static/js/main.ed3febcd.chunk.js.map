{"version":3,"sources":["Person.js","PeopleTable.js","App.js","index.js"],"names":["Person","_ref","person","select","selectedId","personSex","sex","tooOld","born","longLiver","age","trClasses","concat","century","personSelected","id","react_default","a","createElement","onClick","className","name","died","father","mother","children","PeopleTable","state","setSelectedId","_this","setState","_this2","this","_this$props","props","people","sortPeople","map","src_Person","key","React","Component","GetPeoples","Object","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","apply","arguments","App","visiblePeople","inputValue","sortField","checkPersonInfo","info","inputText","toLowerCase","includes","filterPeople","event","target","value","prevState","filter","filterFields","targetField","prevstate","toConsumableArray","sort","b","localeCompare","reverse","peopleWithProps","index","objectSpread","Math","ceil","relative","join","_this$state","length","onChange","type","placeholder","size","src_PeopleTable","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ed3febcd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Person = ({ person, select, selectedId }) => {\n  const personSex = (person.sex === 'm')\n    ? 'Person--male'\n    : 'Person--female';\n\n  const tooOld = (person.born < 1650)\n    ? 'tooOld'\n    : null;\n\n  const longLiver = (person.age >= 65)\n    ? 'longLiver'\n    : null;\n\n  const centuryClass = ` Person--lived-in-${person.century}`;\n  const trClasses = personSex + centuryClass;\n  const personSelected = (\n    person.id === selectedId)\n    ? 'Person--selected'\n    : '';\n\n  return (\n    <tr\n      onClick={() => select(person.id)}\n      className={`${trClasses} ${personSelected}`}\n    >\n      <td>{person.id}</td>\n      <td className={tooOld}>{person.name}</td>\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td className={longLiver}>{person.age}</td>\n      <td>{person.century}</td>\n      <td>{person.father}</td>\n      <td>{person.mother}</td>\n      <td>{person.children}</td>\n    </tr>\n  );\n};\n\nPerson.propTypes = {\n  person: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    sex: PropTypes.string,\n    born: PropTypes.number,\n    died: PropTypes.number,\n    age: PropTypes.number,\n    century: PropTypes.number,\n    father: PropTypes.string,\n    mother: PropTypes.string,\n  }).isRequired,\n  select: PropTypes.func.isRequired,\n  selectedId: PropTypes.number.isRequired,\n};\n\nexport default Person;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Person from './Person';\n\nclass PeopleTable extends React.Component {\n  state = {\n    selectedId: 0,\n  }\n\n  setSelectedId = (id) => {\n    this.setState({\n      selectedId: id,\n    });\n  }\n\n  render() {\n    const { people, sortPeople } = this.props;\n    const { selectedId } = this.state;\n\n    return (\n      <table className=\"PeopleTable\">\n        <thead>\n          <tr>\n            <th onClick={() => sortPeople('id')}>ID</th>\n            <th onClick={() => sortPeople('name')}>Name</th>\n            <th onClick={() => sortPeople('sex')}>Sex</th>\n            <th onClick={() => sortPeople('born')}>Born</th>\n            <th onClick={() => sortPeople('died')}>Died</th>\n            <th onClick={() => sortPeople('age')}>Age</th>\n            <th onClick={() => sortPeople('century')}>Century</th>\n            <th>Father</th>\n            <th>Mother</th>\n            <th>Children</th>\n          </tr>\n        </thead>\n        <tbody>\n          {people.map(\n            person => (\n              <Person\n                key={person.id}\n                person={person}\n                selectedId={selectedId}\n                select={this.setSelectedId}\n              />\n            )\n          )}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nPeopleTable.propTypes = {\n  people: PropTypes.object,\n  sortPeople: PropTypes.func,\n}.isRequired;\n\nexport default PeopleTable;\n","import React, { Component } from 'react';\nimport PeopleTable from './PeopleTable';\nimport './App.css';\n\nconst GetPeoples = async() => {\n  const u = 'https://mate-academy.github.io/react_people-table/api/people.json';\n  const response = await fetch(u);\n  const people = await response.json();\n\n  return people;\n};\n\nclass App extends Component {\n  state = {\n    people: [],\n    visiblePeople: [],\n    inputValue: '',\n    sortField: '',\n  }\n\n  async componentDidMount() {\n    const people = await GetPeoples();\n\n    const peopleWithProps = people.map((person, index) => ({\n      id: index + 1,\n      ...person,\n      age: person.died - person.born,\n      century: Math.ceil(person.died / 100),\n      children: people.filter(relative => relative.mother === person.name\n        || relative.father === person.name)\n        .map(relative => relative.name)\n        .join(', '),\n    }));\n\n    this.setState({\n      people: peopleWithProps,\n      visiblePeople: peopleWithProps,\n    });\n  }\n\n  checkPersonInfo = (info, inputText) => {\n    if (info) {\n      return info.toLowerCase().includes(inputText.toLowerCase());\n    }\n\n    return false;\n  }\n\n  filterPeople = (event) => {\n    const inputText = event.target.value;\n\n    this.setState(prevState => ({\n      inputValue: inputText,\n      visiblePeople: prevState.people.filter((person) => {\n        const filterFields = person.name + person.mother + person.father;\n\n        return this.checkPersonInfo(filterFields, inputText);\n      }),\n    }));\n  }\n\n  sortPeople = (targetField) => {\n    (targetField !== this.state.sortField)\n      ? this.setState(prevstate => ({\n        visiblePeople: [...prevstate.people].sort((a, b) => {\n          switch (typeof a[targetField]) {\n            case 'string':\n              return a[targetField].localeCompare(b[targetField]);\n\n            case 'boolean':\n            case 'number':\n              return a[targetField] - b[targetField];\n\n            default:\n              return 0;\n          }\n        }),\n        sortField: targetField,\n      }))\n      : this.setState(prevstate => ({\n        visiblePeople: [...prevstate.visiblePeople.reverse()],\n      }));\n  }\n\n  render() {\n    const { inputValue, visiblePeople } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>\n          Number of people:\n          {visiblePeople.length}\n        </h1>\n        <input\n          onChange={this.filterPeople}\n          value={inputValue}\n          type=\"text\"\n          placeholder=\"Serch by name, mother or father\"\n          size=\"40\"\n        />\n        <PeopleTable\n          people={visiblePeople}\n          sortPeople={this.sortPeople}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}